_startAddress_                    EQU                          0x0200

; Internal Variables
serialRawPrev                     EQU                          0x0081
frameCountPrev                    EQU                          0x00d6
register0                         EQU                          0x0082
register1                         EQU                          register0 + 0x02
register2                         EQU                          register0 + 0x04
register3                         EQU                          register0 + 0x06
register4                         EQU                          register0 + 0x08
register5                         EQU                          register0 + 0x0A
register6                         EQU                          register0 + 0x0C
register7                         EQU                          register0 + 0x0E
register8                         EQU                          register0 + 0x10
register9                         EQU                          register0 + 0x12
register10                        EQU                          register0 + 0x14
register11                        EQU                          register0 + 0x16
register12                        EQU                          register0 + 0x18
register13                        EQU                          register0 + 0x1A
register14                        EQU                          register0 + 0x1C
register15                        EQU                          register0 + 0x1E
fgbgColour                        EQU                          register0 + 0x20
cursorXY                          EQU                          register0 + 0x22
midiStream                        EQU                          register0 + 0x24
midiDelay                         EQU                          register0 + 0x26
miscFlags                         EQU                          register0 + 0x28
register16                        EQU                          register0 + 0x2A

; Internal Constants
MISC_WAIT_VBLANK_BIT              EQU                          0x01
MISC_ENABLE_SCROLL_BIT            EQU                          0x02
MISC_ON_BOTTOM_ROW_BIT            EQU                          0x04
MISC_DISABLE_CLIP_BIT             EQU                          0x08
MISC_ENABLE_FNT4X6_BIT            EQU                          0x10
MISC_WAIT_VBLANK_MSK              EQU                          0xfe
MISC_ENABLE_SCROLL_MSK            EQU                          0xfd
MISC_ON_BOTTOM_ROW_MSK            EQU                          0xfb
MISC_DISABLE_CLIP_MSK             EQU                          0xf7
MISC_ENABLE_FNT4X6_MSK            EQU                          0xef

; Internal Buffers
regsWorkArea                      EQU                          0x0000
textWorkArea                      EQU                          0x7fa0

; Includes
%includePath                      "runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros_ROMvX0.i

; Labels
_entryPoint_                      EQU                          0x0200
_reset                            EQU                          0x0227
_start                            EQU                          0x022a
_init                             EQU                          0x022d
_loop                             EQU                          0x0230
_if_0x0000                        EQU                          0x0260
_if_0x0001                        EQU                          0x026a
_if_0x0002                        EQU                          0x0277
_if_0x0003                        EQU                          0x0284
_if_0x0004                        EQU                          0x028d
_if_0x0005                        EQU                          0x0297
_if_0x0006                        EQU                          0x02a5
_if_0x0007                        EQU                          0x02b3
_if_0x0008                        EQU                          0x031c
_if_0x0009                        EQU                          0x0325
_if_0x000a                        EQU                          0x0331
_if_0x000b                        EQU                          0x033a
_initSystem                       EQU                          0x034a
_resetLevel                       EQU                          0x0358
_startLevel                       EQU                          0x035e
_initVars                         EQU                          0x0364
_waitScanline                     EQU                          0x0394
_repeat_0x000c                    EQU                          0x0398
_page_0x0300                      EQU                          0x0300

; Constants
_lutsize                          EQU                          0x0040
_glider_up                        EQU                          0x0000
_glider_nt                        EQU                          0x0001
_glider_dw                        EQU                          0x0002
_logo                             EQU                          0x0003

; Global Variables
_x                                EQU                          0x0030
_y                                EQU                          0x0032
_button                           EQU                          0x0034
_sp                               EQU                          0x0036
_dx                               EQU                          0x0038
_dy                               EQU                          0x003a
_ang                              EQU                          0x003c

; Local Variables

; Arrays
_sinlut                           EQU                          0x0680
_sinlut                           DW                           0x0000 0x0006 0x000d 0x0013 0x0019 0x001f 0x0026 0x002c 0x0032 0x0038 0x003e 0x0045 0x004b 0x0051 0x0057 0x005d 0x0063 0x0069 0x006f 0x0075 0x007a 0x0080 0x0086 0x008c 0x0091 0x0097 0x009d 0x00a2 0x00a8 0x00ad 0x00b3 0x00b8 0x00bd 0x00c3 0x00c8 0x00cd 0x00d2 0x00d8 0x00dd 0x00e2 0x00e7 0x00ec 0x00f0 0x00f5 0x00fa 0x00ff 0x0104 0x0108 0x010d 0x0111 0x0116 0x011a 0x011e 0x0122 0x0126 0x012a 0x012e 0x0132 0x0136 0x0139 0x013d 0x0140 0x0144 0x0147 

; Strings

; Constant Strings
_str_0x74a5                       EQU                          0x74a5
_str_0x74a5                       DB                           16 'PRESS A TO START' 0

; Data

; Time

; Define Bytes

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Midis

; Define Blits
def_blits_0x7dab                  EQU                          0x7dab
def_blits_0x7dab                  DB                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 63 63 0 0 0 63 0 0 63 0 0 63 0 0 63 0 0 63 0 0 0 63 0 0 63 0 0 63 0 0 0 63 0 0 0 0 0 0 63 63 0 0 0 63 0 0 0 0 0 63 0 63 0 0 0 0 63 63 242 
def_blits_0x7cab                  EQU                          0x7cab
def_blits_0x7cab                  DB                           0 0 63 63 0 0 0 0 63 63 63 63 0 0 63 0 0 0 0 0 63 0 0 63 0 0 63 0 0 63 0 0 63 0 0 0 63 63 63 63 63 63 0 63 0 0 0 0 63 0 63 0 0 0 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 63 63 0 63 63 63 0 0 63 63 0 0 0 242 
def_blits_0x7bab                  EQU                          0x7bab
def_blits_0x7bab                  DB                           63 63 0 0 0 0 63 63 0 0 0 0 0 0 63 0 0 0 0 63 63 0 0 0 0 63 63 0 0 0 63 0 63 0 0 0 63 63 63 63 63 0 0 63 63 0 63 0 0 0 63 63 0 0 0 63 0 0 0 0 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 242 
def_blits_0x7aab                  EQU                          0x7aab
def_blits_0x7aab                  DB                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 63 63 0 0 0 63 0 0 63 0 0 63 0 0 63 0 0 63 0 0 63 0 0 63 0 0 0 63 0 0 63 0 0 63 0 0 0 63 63 63 0 0 63 0 0 0 0 63 0 0 63 0 0 63 0 63 63 63 0 0 63 0 0 0 0 0 0 0 0 0 242 
def_blits_0x79ab                  EQU                          0x79ab
def_blits_0x79ab                  DB                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 63 63 0 0 0 0 63 63 0 0 0 0 63 0 0 63 63 63 63 0 63 0 0 0 63 0 0 0 0 0 63 0 0 0 63 0 0 63 0 0 0 63 63 0 63 63 63 0 63 63 0 0 63 63 63 0 0 0 0 0 0 0 242 
def_blits_0x78ab                  EQU                          0x78ab
def_blits_0x78ab                  DB                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 63 63 0 0 63 63 63 63 0 0 0 0 0 0 63 0 0 63 0 63 63 0 0 63 0 63 63 0 0 0 63 0 63 0 63 63 63 63 63 0 0 63 63 63 0 0 63 63 0 63 0 0 0 63 63 63 0 0 0 0 0 0 0 0 242 
def_blits_0x77a5                  EQU                          0x77a5
def_blits_0x77a5                  DB                           0 0 0 0 0 0 0 0 63 63 0 0 0 63 0 0 63 0 0 63 0 0 63 0 0 63 0 0 63 0 0 63 0 0 0 63 0 0 63 0 0 63 0 0 63 63 0 63 0 63 0 63 63 63 0 63 0 0 0 0 0 0 63 0 0 0 0 0 0 63 63 0 0 0 0 0 0 63 0 0 0 0 0 0 0 0 0 0 0 0 241 
def_blits_0x76a5                  EQU                          0x76a5
def_blits_0x76a5                  DB                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 63 63 0 63 0 0 63 63 63 0 63 63 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 63 63 0 0 0 0 0 0 63 63 63 0 0 0 63 63 0 63 63 63 0 63 0 0 0 63 63 63 241 
def_blits_0x75a5                  EQU                          0x75a5
def_blits_0x75a5                  DB                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 63 63 0 0 0 63 63 63 0 0 0 0 0 0 63 0 0 0 0 0 63 0 0 63 0 63 63 0 0 63 0 63 63 0 0 63 63 63 63 0 0 0 0 63 63 63 0 0 0 63 0 63 0 0 0 63 63 63 0 241 
def_blits_0x74b7                  EQU                          0x74b7
def_blits_0x74b7                  DB                           0 0 0 0 0 63 0 0 0 0 63 63 0 0 0 63 63 63 0 0 0 63 63 63 0 0 0 63 63 63 0 0 0 0 63 63 0 0 0 0 0 63 0 0 0 0 0 0 0 0 0 63 63 0 0 0 0 63 63 63 0 0 0 63 63 63 0 0 0 0 63 63 244 
def_blits_0x73b7                  EQU                          0x73b7
def_blits_0x73b7                  DB                           63 63 63 63 63 0 63 63 63 63 63 63 63 0 0 63 63 63 0 0 0 0 63 63 63 0 0 0 0 0 63 63 63 63 0 0 63 63 63 63 63 63 0 0 63 63 63 63 0 0 0 63 63 63 0 0 63 63 63 63 63 63 63 63 63 63 63 63 63 63 0 0 244 
def_blits_0x72b7                  EQU                          0x72b7
def_blits_0x72b7                  DB                           0 0 0 0 0 0 0 63 63 0 0 0 63 63 63 0 0 0 63 63 63 0 0 0 63 63 0 0 0 0 63 63 0 0 0 0 63 63 0 0 0 0 63 63 0 0 0 0 63 63 0 0 0 0 63 63 63 0 0 0 63 63 63 63 63 63 63 63 63 63 63 63 244 
def_blits_0x71b7                  EQU                          0x71b7
def_blits_0x71b7                  DB                           0 0 0 0 0 0 0 63 63 0 63 63 0 63 63 63 63 63 0 63 63 63 63 0 0 63 63 63 0 0 0 63 63 63 63 0 63 63 63 63 63 63 63 63 0 63 63 63 63 63 0 0 0 0 63 63 63 63 0 63 63 0 63 63 63 63 63 0 63 63 63 63 244 
def_blits_0x70b7                  EQU                          0x70b7
def_blits_0x70b7                  DB                           0 0 0 0 0 0 63 63 63 63 0 0 63 63 63 63 63 63 0 0 63 63 63 63 0 0 63 63 63 63 0 0 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 0 63 63 63 63 63 63 63 63 0 63 63 63 63 63 0 63 63 63 0 0 0 0 63 244 
def_blits_0x6fb7                  EQU                          0x6fb7
def_blits_0x6fb7                  DB                           0 0 0 0 0 0 63 63 63 63 0 63 63 63 63 63 63 63 63 63 63 63 63 63 63 0 0 63 63 63 0 0 0 0 63 63 0 0 0 0 63 63 0 0 0 63 63 63 63 0 0 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 0 63 63 244 
def_blits_0x6eb7                  EQU                          0x6eb7
def_blits_0x6eb7                  DB                           0 0 0 0 0 0 63 63 63 0 63 63 63 63 63 63 63 63 63 63 63 63 63 63 0 63 63 63 63 0 0 0 63 63 63 0 0 0 63 63 0 0 0 0 63 63 0 0 0 0 63 63 0 0 0 0 63 63 0 0 0 0 63 63 0 0 0 0 63 63 0 0 244 
def_blits_0x6db7                  EQU                          0x6db7
def_blits_0x6db7                  DB                           0 0 0 0 0 0 63 63 63 0 63 63 63 63 63 63 63 63 0 0 63 63 63 0 0 0 63 63 0 0 0 0 63 63 63 0 0 0 63 63 63 63 0 0 0 63 63 63 0 0 0 0 0 0 0 0 63 63 0 0 0 0 63 63 63 63 0 0 0 63 63 63 244 
def_blits_0x6cb7                  EQU                          0x6cb7
def_blits_0x6cb7                  DB                           0 0 0 0 0 0 63 63 0 63 0 63 63 63 63 63 0 63 0 0 63 63 0 63 0 0 63 63 63 63 0 0 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 0 63 63 63 63 63 63 63 63 0 63 63 63 63 63 0 63 63 63 63 0 0 0 63 244 
def_blits_0x6bb7                  EQU                          0x6bb7
def_blits_0x6bb7                  DB                           0 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 63 63 0 0 0 0 63 63 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 63 63 63 63 63 0 63 63 63 63 63 0 244 
def_blits_0x6ab7                  EQU                          0x6ab7
def_blits_0x6ab7                  DB                           63 63 0 0 0 0 63 63 0 0 0 0 0 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 63 63 63 63 0 63 63 63 63 63 63 63 63 0 0 63 63 63 0 0 0 63 63 63 63 0 0 63 63 63 63 63 63 63 63 0 63 63 63 244 
def_blits_0x69b7                  EQU                          0x69b7
def_blits_0x69b7                  DB                           0 63 63 0 0 0 0 63 63 0 0 0 63 63 63 0 63 63 63 63 63 63 63 63 63 63 63 63 63 0 63 63 63 63 0 0 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 0 0 63 63 63 63 63 0 63 63 0 63 63 63 63 0 0 0 63 63 244 
def_blits_0x68b7                  EQU                          0x68b7
def_blits_0x68b7                  DB                           0 0 0 0 0 0 0 0 63 63 63 0 63 0 63 63 63 63 63 63 63 0 63 63 63 63 63 0 63 63 0 63 63 63 0 63 63 63 63 63 0 63 63 63 63 0 0 63 0 0 0 0 0 63 0 0 63 63 0 63 63 63 63 63 0 63 63 63 63 0 0 63 244 
def_blits_0x67b7                  EQU                          0x67b7
def_blits_0x67b7                  DB                           0 0 0 0 0 0 63 63 63 63 0 0 63 63 63 63 0 0 63 63 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 244 

; Define Fonts

; Define Sprites

; Define Patterns

; Lookup Tables
_blitLut_0x73a9                   EQU                          0x73a9
_blitLut_0x73a9                   DW                           0x7dab 0x0000 0x7cab 0x0006 0x7bab 0x000c 0x0000
_blitLut_0x72a9                   EQU                          0x72a9
_blitLut_0x72a9                   DW                           0x7aab 0x0000 0x79ab 0x0006 0x78ab 0x000c 0x0000
_blitLut_0x71a9                   EQU                          0x71a9
_blitLut_0x71a9                   DW                           0x77a5 0x0000 0x76a5 0x0006 0x75a5 0x000c 0x0000
_blitLut_0x66c6                   EQU                          0x66c6
_blitLut_0x66c6                   DW                           0x74b7 0x0000 0x73b7 0x0006 0x72b7 0x000c 0x71b7 0x0012 0x70b7 0x0018 0x6fb7 0x001e 0x6eb7 0x0024 0x6db7 0x002a 0x6cb7 0x0030 0x6bb7 0x0036 0x6ab7 0x003c 0x69b7 0x0042 0x68b7 0x0048 0x67b7 0x004e 0x0000
_blitsLut_                        EQU                          0x7da3
_blitsLut_                        DW                           0x73a9 0x72a9 0x71a9 0x66c6 

; Lazy Constants

; Code
_entryPoint_                      LDI                          0x80
                                  STW                          romUser
                                  RomCheck                     
                                  Initialise                                                ; INIT

                                  CALLI                        _initSystem                  ; call initSystem

_reset                            CALLI                        _resetLevel                  ; call resetLevel

_start                            CALLI                        _startLevel                  ; call startLevel

_init                             CALLI                        _initVars                    ; call initVars

_loop                             CALLI                        _waitScanline                ; call waitScanline

                                  LD                           giga_buttonState
                                  STW                          _button                      ; button = get("BUTTON_STATE")

                                  LDW                          _dx
                                  MULW9                        
                                  STW                          giga_sysArg0
                                  MOVQW                        giga_sysArg2, 10
                                  CALLI                        divide16bit
                                  STW                          _dx                          ; dx = (9*dx) / 10

                                  LDW                          _dy
                                  MULW9                        
                                  STW                          giga_sysArg0
                                  MOVQW                        giga_sysArg2, 10
                                  CALLI                        divide16bit
                                  STW                          _dy                          ; dy = (9*dy) / 10

                                  MOVQW                        _sp, 0                       ; sp = 0

                                  CMPI                         _button, 254
                                  JNE                          _if_0x0000
                                  ADDVI                        _ang, _ang, 6                ; if button == &hfe then ang = ang + 6

_if_0x0000                        CMPI                         _button, 253
                                  JNE                          _if_0x0001
                                  SUBVI                        _ang, _ang, 6                ; if button == &hfd then ang = ang - 6

_if_0x0001                        CMPI                         _button, 246
                                  JNE                          _if_0x0002
                                  ADDVI                        _ang, _ang, 70
                                  MOVQW                        _sp, 1                       ; if button == &hf6 then ang = ang + 70 : sp = 1

_if_0x0002                        CMPI                         _button, 245
                                  JNE                          _if_0x0003
                                  SUBVI                        _ang, _ang, 70
                                  MOVQW                        _sp, 1                       ; if button == &hf5 then ang = ang - 70 : sp = 1

_if_0x0003                        CMPI                         _button, 247
                                  JNE                          _if_0x0004
                                  MOVQW                        _sp, 1                       ; if button == &hf7 then sp = 1

_if_0x0004                        CMPI                         _button, 251
                                  JNE                          _if_0x0005
                                  LDNI                         1
                                  STW                          _sp                          ; if button == &hfb then sp = -1

_if_0x0005                        CMPI                         _button, 250
                                  JNE                          _if_0x0006
                                  ADDVI                        _ang, _ang, 70
                                  LDNI                         1
                                  STW                          _sp                          ; if button == &hfa then ang = ang + 70 : sp = -1

_if_0x0006                        CMPI                         _button, 249
                                  JNE                          _if_0x0007
                                  SUBVI                        _ang, _ang, 70
                                  LDNI                         1
                                  STW                          _sp                          ; if button == &hf9 then ang = ang - 70 : sp = -1

_if_0x0007                        MOVWA                        _sp, giga_sysArg0
                                  MOVWA                        _ang, giga_sysArg2
                                  CALLI                        multiply16bit
                                  STW                          _dx                          ; dx = sp * cos(ang)

                                  ADDVI                        _ang, 0xe8, 180
                                  MOVWA                        _sp, giga_sysArg0
                                  MOVWA                        0xe8, giga_sysArg2
                                  CALLI                        multiply16bit
                                  STW                          _dy                          ; dy = sp * sin(ang+180)

                                  MOVQB                        cursorXY, 0
                                  MOVQB                        cursorXY + 1, 0
                                  AtTextCursor                                              ; at 0,0

                                  LD                           _ang + 1
                                  PrintAcInt16                 
                                  NewLine                                                   ; PRINT ang.hi

                                  MOVQB                        cursorXY, 0
                                  MOVQB                        cursorXY + 1, 8
                                  AtTextCursor                                              ; at 0,8

                                  LDW                          _dx
                                  PrintAcInt16                 
                                  NewLine                                                   ; PRINT dx

                                  MOVQB                        cursorXY, 0
                                  MOVQB                        cursorXY + 1, 16
                                  CALLI                        _page_0x0300
_page_0x0300                      AtTextCursor                                              ; at 0,16

                                  LDW                          _dy
                                  PrintAcInt16                 
                                  NewLine                                                   ; PRINT dy

                                  ADDVW                        _x, _dx, _x                  ; x = x + dx

                                  ADDVW                        _y, _dy, _y                  ; y = y + dy

                                  CMPI                         _x + 1, 142
                                  JLE                          _if_0x0008
                                  MOVQB                        _x + 1, 1                    ; if x.hi > 142 then x.hi = 1

_if_0x0008                        CMPI                         _x + 1, 0
                                  JGT                          _if_0x0009
                                  MOVQB                        _x + 1, 142                  ; if x.hi <= 0 then x.hi = 142

_if_0x0009                        CMPI                         _y + 1, 105
                                  JLE                          _if_0x000a
                                  MOVQB                        _y + 1, 105
                                  NEGW                         _dy                          ; if y.hi > 105 then y.hi = 105 : dy = -dy

_if_0x000a                        CMPI                         _y + 1, 4
                                  JGT                          _if_0x000b
                                  MOVQB                        _y + 1, 5                    ; if y.hi <= 4 then y.hi = 5

_if_0x000b                        MOVQW                        blitId, 0
                                  MOVB                         _x + 1, blitXY
                                  ADDBI                        _y + 1, blitXY + 1, 8
                                  DrawBlit                                                  ; blit NoFlip, glider_up, x.hi, y.hi

                                  CALLI                        _loop                        ; goto loop

_initSystem                       PUSH                                                      ; proc initSystem

                                  MOVQW                        graphicsMode, 2
                                  ScanlineMode                                              ; mode 2

                                  LDWI                         16128
                                  STW                          fgbgColour                   ; set FGBG_COLOUR, &h3F00

                                  Return                                                    ; endproc

_resetLevel                       PUSH                                                      ; proc resetLevel

                                  ClearVertBlinds                                           ; cls

                                  Return                                                    ; endproc

_startLevel                       PUSH                                                      ; proc startLevel

                                  ClearVertBlinds                                           ; cls

                                  Return                                                    ; endproc

_initVars                         PUSH                                                      ; proc initVars

                                  MOVQB                        _x + 1, 71                   ; x.hi = 71

                                  MOVQB                        _y + 1, 54                   ; y.hi = 54

                                  MOVQW                        _dx, 0                       ; dx = 0

                                  MOVQW                        _dy, 0                       ; dy = 0

                                  MOVQW                        _ang, 0                      ; ang = 0

                                  MOVQW                        blitId, 3
                                  MOVQB                        blitXY, 38
                                  MOVQB                        blitXY + 1, 24
                                  DrawBlit                                                  ; blit NoFlip, logo, 38, 16

                                  MOVQB                        cursorXY, 32
                                  MOVQB                        cursorXY + 1, 90
                                  AtTextCursor                                              ; at 32,90

                                  PrintString                  _str_0x74a5
                                  NewLine                                                   ; PRINT "PRESS A TO START"

                                  Return                                                    ; endproc

_waitScanline                     PUSH                                                      ; proc waitScanline

                                  WaitVBlank                                                ; wait

_repeat_0x000c                    ANDBK                        giga_videoY, 0x01
                                  JumpFalse                    _repeat_0x000c               ; until (get("VIDEO_Y") AND 1)

                                  Return                                                    ; endproc

                                  HALT                                                      ; END



;*************************************************************************************************************
;*************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files *
;*************************************************************************************************************
;*************************************************************************************************************

romCheck                          EQU     0x62a3
multiply16bit                     EQU     0x69ab
divide16bit                       EQU     0x60dd
scanlineMode                      EQU     0x7ba1
resetVideoFlags                   EQU     0x79a3
initClearFuncs                    EQU     0x6aa9
clearVertBlinds                   EQU     0x63a0
clearCursorRow                    EQU     0x66a3
clearCursorRow4x6                 EQU     0x61dc
drawBlit_                         EQU     0x6ea1
drawBlit                          EQU     0x7ca0
printInit                         EQU     0x6ca2
printInit4x6                      EQU     0x7aa2
printText                         EQU     0x6ba3
printDigit                        EQU     0x60be
printInt16                        EQU     0x63ca
printChar                         EQU     0x62cc
printChar4x6                      EQU     0x6da1
printClip                         EQU     0x70a0
printClip4x6                      EQU     0x6fa0
newLineScroll                     EQU     0x65b7
newLineScroll4x6                  EQU     0x64be
atTextCursor                      EQU     0x61b9
atTextCursor4x6                   EQU     0x64a2



realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romUser             EQU     register0                           
romType             EQU     register1                           
romReadAddr         EQU     register0               
romErrAddr          EQU     0x7E                                
vramErrAddr         EQU     0x0101

romErrAddr          DW      vramErrAddr
 


romCheck            LD      giga_romType
                    ANDI    0xFC
                    STW     romType
                    SUBW    romUser
                    BEQ     romC_return                         
                    LDW     romUser
                    SUBI    0x80                                
                    BNE     romC_check
                    LDW     romType
                    SUBW    romUser
                    BEQ     romC_return                         
                    BRA     romC_fail
                    
romC_check          LDW     romType                             
                    SUBW    romUser
                    BGT     romC_return                         
                    
romC_fail           LD      giga_rand0
                    POKE    romErrAddr                          
                    BRA     romC_fail

romC_return         RET



mathX               EQU     giga_sysArg0
mathY               EQU     giga_sysArg2
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


                    
multiply16bit       MOVQW   giga_sysFn, SYS_Multiply_s16_vX_66
                    MOVQW   giga_sysArg4, 0                     
                    MOVQW   giga_sysArg6, 1                     
                    SYS     66
                    RET


                    
divide16bit         LDW     giga_sysArg0                        
                    XORW    giga_sysArg2                        
                    STW     mathSign
                    ABSVW   giga_sysArg0
                    ABSVW   giga_sysArg2
                    MOVQW   giga_sysFn, SYS_Divide_s16_vX_80
                    MOVQW   giga_sysArg4, 0                     
                    MOVQW   giga_sysArg6, 1                     
                    SYS     80
                    LDW     mathSign
                    BGE     divide16_exit
                    NEGW    giga_sysArg0
                    
divide16_exit       LDW     giga_sysArg0
                    RET



graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register8
drawLine_dy1        EQU     register9
drawLine_dx2        EQU     register10
drawLine_dy2        EQU     register11
drawLine_sx         EQU     register12
drawLine_sy         EQU     register13
drawLine_h          EQU     register14
drawLine_num        EQU     register15
drawLine_count      EQU     register14
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10
drawLine_ddx        EQU     register11
drawLine_cnt        EQU     register12
drawLine_swp        EQU     register13
drawLine_xy         EQU     register7

drawPixel_xy        EQU     register0
readPixel_xy        EQU     register0

drawCircle_cycx     EQU     register0
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_cnt     EQU     register3
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register16

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register3
drawRectF_xcnt      EQU     register8
drawRectF_ycnt      EQU     register9

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register7

    
scanlineMode        LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET



xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vtbLines            EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
clsLines            EQU     register14
varAddress          EQU     register13
varCount            EQU     register14
clrAddress          EQU     register13
clrLines            EQU     register14
clrWidth            EQU     register15
ramAddr             EQU     register14
ramCount            EQU     register15


resetVideoFlags     MOVQW   cursorXY, giga_CursorX              
                    ANDBI   miscFlags, MISC_ON_BOTTOM_ROW_MSK   
                    RET



initClearFuncs      PUSH
                    CALLI   resetVideoFlags
                    LDWI    SYS_SetMemory_v2_54                 
                    STW     giga_sysFn
                    MOVB    fgbgColour, giga_sysArg1            
                    POP
                    RET


                    
clearVertBlinds     PUSH
                    CALLI   initClearFuncs
                    MOVQW   top, giga_vram >> 8
                    MOVQB   clsLines, giga_yres/2
                    
clearVB_loopy       MOVQB   giga_sysArg0, giga_xres
                    MOVQB   giga_sysArg2, 0                     
                    MOVB    top, giga_sysArg3                   
                    SYS     54                                  
    
                    MOVQB   giga_sysArg0, giga_xres
                    MOVQB   giga_sysArg2, 0                     
                    LDI     giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                        
                    SYS     54                                  
                    INC     top                                 
                    DBNE    clsLines, clearVB_loopy
                    POP
                    RET




blitId              EQU     register0
blitXY              EQU     register1
blitAddrs           EQU     register2
blitScrollY         EQU     register3
blitTemp            EQU     register8
blitAdrTmp          EQU     register9
blitScrollY6        EQU     register10
blitScrollSize      EQU     register11


drawBlit_           ARRVW   blitId, _blitsLut_
                    DEEKA   blitAddrs                     
                    BRA     drawB_check
                    
drawB_loop          STW     giga_sysArg0
                    DEEKV+  blitAddrs
                    ADDW    blitXY
                    SYS     64

drawB_check         DEEKV+  blitAddrs
                    BNE     drawB_loop
                    RET


drawBlit            PUSH
                    LDWI    SYS_Sprite6_v3_64
                    STW     giga_sysFn
                    CALLI   drawBlit_
                    POP
                    RET





textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textHex             EQU     register1
textSpc             EQU     register1
textLen             EQU     register2
textOfs             EQU     register3
textChr             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           ANDBK   miscFlags, MISC_ENABLE_FNT4X6_BIT
                    JNE     printInit4x6                        
                    LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    MOVWA   fgbgColour, giga_sysArg0
                    LDW     cursorXY
                    VTBL    giga_sysArg4                        
                    RET


printInit4x6        MOVWA   fgbgColour, giga_sysArg0
                    LDW     cursorXY
                    VTBL    giga_sysArg4                        
                    RET



                    
printText           PUSH
                    STW     textStr
                    CALLI   printInit
                    INC     textStr                             

printT_char         PEEKV+  textStr             
                    BEQ     printT_exit                         
                    CALLI   printChar
                    BRA     printT_char
                    
printT_exit         POP
                    RET



                    
printDigit          PUSH
                    STW     digitMult
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
    
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    CALLI   printChar
                    MOVQB   digitIndex, 0x30
printD_exit         POP
                    RET


                    
printInt16          PUSH
                    STW     textNum
                    CALLI   printInit
                    MOVQB   digitIndex, 0
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    CALLI   printChar
                    NEGW    textNum
    
printI16_pos        LDWI    10000
                    CALLI   printDigit
                    LDWI    1000
                    CALLI   printDigit
                    LDI     100
                    CALLI   printDigit
                    LDI     10
                    CALLI   printDigit
                    ORBK    textNum, 0x30
                    CALLI   printChar
                    POP
                    RET




                    
printChar           STW     textChr
                    CMPII   32, 132                             
                    BNE     printC_exit
                    ANDBK   miscFlags, MISC_ENABLE_FNT4X6_BIT
                    JNE     printChar4x6                        
                    FNT6X8  textFont, textChr
                    MOVQB   textSlice, 0x05

printC_slice        LDW     textFont                            
                    LUP     0x00                                
                    ST      giga_sysArg2
                    SYS     134                                 
                    INC     textFont                            
                    INC     giga_sysArg4                        
                    DBNE    textSlice, printC_slice
                    
                    MOVQB   giga_sysArg2, 0
                    SYS     134                                 
                    INC     giga_sysArg4                        
                    
                    PUSH
                    CALLI   printClip
                    POP
                    
printC_exit         RET



                    
printChar4x6        FNT4X6  textFont, textChr
                    MOVQB   giga_sysArg2, 3                     
                    LDW     giga_sysArg4
                    PRN4X6  textFont
                    ADDBI   giga_sysArg4, giga_sysArg4, 4       
                    PUSH
                    CALLI   printClip4x6
                    POP
                    
printC46_exit       RET


printClip           ADDBI   cursorXY, cursorXY, giga_xfont
                    CMPI    cursorXY, giga_xres - giga_xfont    
                    BLE     printCl_exit
                    ANDBK   miscFlags, MISC_DISABLE_CLIP_BIT
                    BNE     printCl_exit                        
                    PUSH
                    CALLI   newLineScroll                       
                    POP
                    
printCl_exit        RET



printClip4x6        ADDBI   cursorXY, cursorXY, 4
                    CMPI    cursorXY, giga_xres - 4             
                    BLE     printCl46_exit
                    ANDBK   miscFlags, MISC_DISABLE_CLIP_BIT
                    BNE     printCl46_exit                      
                    PUSH
                    CALLI   newLineScroll4x6                    
                    POP
                    
printCl46_exit      RET



                    
clearCursorRow      PUSH
                    LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn                          
                    MOVB    fgbgColour, giga_sysArg1            
                    LDWI    giga_videoTable
                    PEEKA   giga_sysArg3                        
                    MOVQW   clearLoop, giga_yfont

clearCR_loopy       MOVQB   giga_sysArg0, giga_xres
                    MOVQB   giga_sysArg2, 0                     
                    SYS     54                                  
                    INC     giga_sysArg3                        
                    DBNE    clearLoop, clearCR_loopy
                    CALLI   printInit                           
                    POP
                    RET


                    
newLineScroll       ANDBK   miscFlags, MISC_ENABLE_FNT4X6_BIT
                    JNE     newLineScroll4x6                    
                    LDI     giga_CursorX                        
                    ST      cursorXY
                    ST      giga_sysArg4
                    ANDBK   miscFlags, MISC_ENABLE_SCROLL_BIT
                    BNE     newLS_cont0                         
                    RET
                    
newLS_cont0         PUSH
                    ANDBK   miscFlags, MISC_ON_BOTTOM_ROW_BIT
                    BNE     newLS_cont1                         
                    ADDBI   cursorXY + 1, cursorXY + 1, giga_yfont
                    CMPI    cursorXY + 1, giga_yres
                    BLT     newLS_exit
                    MOVQB   cursorXY + 1, giga_yres - giga_yfont
                    
newLS_cont1         CALLI   clearCursorRow
                    LDWI    giga_videoTable
                    STW     giga_sysArg2                        
                    MOVQB   giga_sysArg0, giga_yfont            
                    MOVQB   giga_sysArg1, giga_yres             
                    LDWI    SYS_ScrollVTableY_vX_38
                    STW     giga_sysFn
                    SYS     38
                    ORBI    miscFlags, MISC_ON_BOTTOM_ROW_BIT   
                    
newLS_exit          CALLI   printInit                           
                    POP
                    RET



                    
clearCursorRow4x6   PUSH
                    LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn                          
                    MOVB    fgbgColour, giga_sysArg1            
                    LDWI    giga_videoTable
                    PEEKA   giga_sysArg3                        
                    MOVQW   clearLoop, 6

clearCR46_loopy     MOVQB   giga_sysArg0, giga_xres
                    MOVQB   giga_sysArg2, 0                     
                    SYS     54                                  
                    INC     giga_sysArg3                        
                    DBNE    clearLoop, clearCR46_loopy
                    CALLI   printInit                           
                    POP
                    RET


                    
newLineScroll4x6    LDI     0                                   
                    ST      cursorXY
                    ST      giga_sysArg4
                    ANDBK   miscFlags, MISC_ENABLE_SCROLL_BIT
                    BNE     newLS46_cont0                       
                    RET
                    
newLS46_cont0       PUSH
                    ANDBK   miscFlags, MISC_ON_BOTTOM_ROW_BIT
                    BNE     newLS46_cont1                       
                    ADDBI   cursorXY + 1, cursorXY + 1, 6
                    CMPI    cursorXY + 1, giga_yres
                    BLT     newLS46_exit
                    MOVQB   cursorXY + 1, giga_yres - 6
                    
newLS46_cont1       CALLI   clearCursorRow4x6
                    LDWI    giga_videoTable
                    STW     giga_sysArg2                        
                    MOVQB   giga_sysArg0, 6                     
                    MOVQB   giga_sysArg1, giga_yres             
                    LDWI    SYS_ScrollVTableY_vX_38
                    STW     giga_sysFn
                    SYS     38
                    ORBI    miscFlags, MISC_ON_BOTTOM_ROW_BIT   
                    
newLS46_exit        CALLI   printInit4x6                        
                    POP
                    RET



atTextCursor        ANDBK   miscFlags, MISC_ENABLE_FNT4X6_BIT
                    JNE     atTextCursor4x6                     
                    CMPI    cursorXY, giga_xres - giga_xfont
                    BLE     atTC_checkY
                    MOVQB   cursorXY, 0
                    
atTC_checkY         CMPI    cursorXY + 1, giga_yres - giga_yfont
                    BLT     atTC_resbot
                    MOVQB   cursorXY + 1, giga_yres - giga_yfont
                    ORBI    miscFlags, MISC_ON_BOTTOM_ROW_BIT   
                    RET
                    
atTC_resbot         ANDBI   miscFlags, MISC_ON_BOTTOM_ROW_MSK   
                    RET


atTextCursor4x6     CMPI    cursorXY, giga_xres - 4
                    BLE     atTC46_checkY
                    MOVQB   cursorXY, 0
                    
atTC46_checkY       CMPI    cursorXY + 1, giga_yres - 6
                    BLT     atTC46_resbot
                    MOVQB   cursorXY + 1, giga_yres - 6
                    ORBI    miscFlags, MISC_ON_BOTTOM_ROW_BIT   
                    RET
                    
atTC46_resbot       ANDBI   miscFlags, MISC_ON_BOTTOM_ROW_MSK   
                    RET

