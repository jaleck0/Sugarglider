_startAddress_                    EQU                          0x0200

; Internal Variables
serialRawPrev                     EQU                          0x0081
frameCountPrev                    EQU                          0x00d6
register0                         EQU                          0x0082
register1                         EQU                          register0 + 0x02
register2                         EQU                          register0 + 0x04
register3                         EQU                          register0 + 0x06
register4                         EQU                          register0 + 0x08
register5                         EQU                          register0 + 0x0A
register6                         EQU                          register0 + 0x0C
register7                         EQU                          register0 + 0x0E
register8                         EQU                          register0 + 0x10
register9                         EQU                          register0 + 0x12
register10                        EQU                          register0 + 0x14
register11                        EQU                          register0 + 0x16
register12                        EQU                          register0 + 0x18
register13                        EQU                          register0 + 0x1A
register14                        EQU                          register0 + 0x1C
register15                        EQU                          register0 + 0x1E
fgbgColour                        EQU                          register0 + 0x20
cursorXY                          EQU                          register0 + 0x22
midiStream                        EQU                          register0 + 0x24
midiDelay                         EQU                          register0 + 0x26
miscFlags                         EQU                          register0 + 0x28
register16                        EQU                          register0 + 0x2A
timerTick                         EQU                          register0 + 0x2C
timerJiff                         EQU                          register0 + 0x2E

; Internal Constants
MISC_WAIT_VBLANK_BIT              EQU                          0x01
MISC_ENABLE_SCROLL_BIT            EQU                          0x02
MISC_ON_BOTTOM_ROW_BIT            EQU                          0x04
MISC_DISABLE_CLIP_BIT             EQU                          0x08
MISC_ENABLE_FNT4X6_BIT            EQU                          0x10
MISC_WAIT_VBLANK_MSK              EQU                          0xfe
MISC_ENABLE_SCROLL_MSK            EQU                          0xfd
MISC_ON_BOTTOM_ROW_MSK            EQU                          0xfb
MISC_DISABLE_CLIP_MSK             EQU                          0xf7
MISC_ENABLE_FNT4X6_MSK            EQU                          0xef

; Internal Buffers
regsWorkArea                      EQU                          0x0000
textWorkArea                      EQU                          0x7fa0

; Includes
%includePath                      "runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros.i

; Labels
_entryPoint_                      EQU                          0x0200
_reset                            EQU                          0x0233
_start                            EQU                          0x0238
_init                             EQU                          0x023d
_loop                             EQU                          0x0242
_if_0x0000                        EQU                          0x027a
_if_0x0001                        EQU                          0x028e
_if_0x0002                        EQU                          0x02a2
_if_0x0003                        EQU                          0x02ba
_if_0x0004                        EQU                          0x02ce
_if_0x0005                        EQU                          0x02e6
_if_0x0006                        EQU                          0x0316
_if_0x0007                        EQU                          0x0328
_if_0x0008                        EQU                          0x0346
_if_0x0009                        EQU                          0x0356
_if_0x000a                        EQU                          0x036e
_if_0x000b                        EQU                          0x0380
_initSystem                       EQU                          0x0398
_resetLevel                       EQU                          0x03a9
_startLevel                       EQU                          0x03b1
_initVars                         EQU                          0x03b9
_handleInput                      EQU                          0x0413
_if_0x000c                        EQU                          0x042c
_if_0x000d                        EQU                          0x0440
_if_0x000e                        EQU                          0x0454
_if_0x000f                        EQU                          0x046c
_if_0x0010                        EQU                          0x0480
_if_0x0011                        EQU                          0x0498
_if_0x0012                        EQU                          0x04b2
_if_0x0013                        EQU                          0x04c4
_page_0x0300                      EQU                          0x0300
_page_0x0400                      EQU                          0x0400

; Constants
_glider_up                        EQU                          0x0000
_glider_nt                        EQU                          0x0001
_glider_dw                        EQU                          0x0002
_logo                             EQU                          0x0003

; Global Variables
_x                                EQU                          0x0030
_y                                EQU                          0x0032
_button                           EQU                          0x0034
_sp                               EQU                          0x0036
_dx                               EQU                          0x0038
_dy                               EQU                          0x003a
_oldbutton                        EQU                          0x003c

; Local Variables
_handleInput_button               EQU                          0x00c4

; Arrays

; Strings

; Constant Strings
_str_0x74a5                       EQU                          0x74a5
_str_0x74a5                       DB                           16 'PRESS A TO START' 0

; Data

; Time

; Define Bytes

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Midis

; Define Blits
def_blits_0x7dab                  EQU                          0x7dab
def_blits_0x7dab                  DB                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 63 63 0 0 0 63 0 0 63 0 0 63 0 0 63 0 0 63 0 0 0 63 0 0 63 0 0 63 0 0 0 63 0 0 0 0 0 0 63 63 0 0 0 63 0 0 0 0 0 63 0 63 0 0 0 0 63 63 242 
def_blits_0x7cab                  EQU                          0x7cab
def_blits_0x7cab                  DB                           0 0 63 63 0 0 0 0 63 63 63 63 0 0 63 0 0 0 0 0 63 0 0 63 0 0 63 0 0 63 0 0 63 0 0 0 63 63 63 63 63 63 0 63 0 0 0 0 63 0 63 0 0 0 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 63 63 0 63 63 63 0 0 63 63 0 0 0 242 
def_blits_0x7bab                  EQU                          0x7bab
def_blits_0x7bab                  DB                           63 63 0 0 0 0 63 63 0 0 0 0 0 0 63 0 0 0 0 63 63 0 0 0 0 63 63 0 0 0 63 0 63 0 0 0 63 63 63 63 63 0 0 63 63 0 63 0 0 0 63 63 0 0 0 63 0 0 0 0 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 242 
def_blits_0x7aab                  EQU                          0x7aab
def_blits_0x7aab                  DB                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 63 63 0 0 0 63 0 0 63 0 0 63 0 0 63 0 0 63 0 0 63 0 0 63 0 0 0 63 0 0 63 0 0 63 0 0 0 63 63 63 0 0 63 0 0 0 0 63 0 0 63 0 0 63 0 63 63 63 0 0 63 0 0 0 0 0 0 0 0 0 242 
def_blits_0x79ab                  EQU                          0x79ab
def_blits_0x79ab                  DB                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 63 63 0 0 0 0 63 63 0 0 0 0 63 0 0 63 63 63 63 0 63 0 0 0 63 0 0 0 0 0 63 0 0 0 63 0 0 63 0 0 0 63 63 0 63 63 63 0 63 63 0 0 63 63 63 0 0 0 0 0 0 0 242 
def_blits_0x78ab                  EQU                          0x78ab
def_blits_0x78ab                  DB                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 63 63 0 0 63 63 63 63 0 0 0 0 0 0 63 0 0 63 0 63 63 0 0 63 0 63 63 0 0 0 63 0 63 0 63 63 63 63 63 0 0 63 63 63 0 0 63 63 0 63 0 0 0 63 63 63 0 0 0 0 0 0 0 0 242 
def_blits_0x77a5                  EQU                          0x77a5
def_blits_0x77a5                  DB                           0 0 0 0 0 0 0 0 63 63 0 0 0 63 0 0 63 0 0 63 0 0 63 0 0 63 0 0 63 0 0 63 0 0 0 63 0 0 63 0 0 63 0 0 63 63 0 63 0 63 0 63 63 63 0 63 0 0 0 0 0 0 63 0 0 0 0 0 0 63 63 0 0 0 0 0 0 63 0 0 0 0 0 0 0 0 0 0 0 0 241 
def_blits_0x76a5                  EQU                          0x76a5
def_blits_0x76a5                  DB                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 63 63 0 63 0 0 63 63 63 0 63 63 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 63 63 0 0 0 0 0 0 63 63 63 0 0 0 63 63 0 63 63 63 0 63 0 0 0 63 63 63 241 
def_blits_0x75a5                  EQU                          0x75a5
def_blits_0x75a5                  DB                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 63 63 0 0 0 63 63 63 0 0 0 0 0 0 63 0 0 0 0 0 63 0 0 63 0 63 63 0 0 63 0 63 63 0 0 63 63 63 63 0 0 0 0 63 63 63 0 0 0 63 0 63 0 0 0 63 63 63 0 241 
def_blits_0x74b7                  EQU                          0x74b7
def_blits_0x74b7                  DB                           0 0 0 0 0 63 0 0 0 0 63 63 0 0 0 63 63 63 0 0 0 63 63 63 0 0 0 63 63 63 0 0 0 0 63 63 0 0 0 0 0 63 0 0 0 0 0 0 0 0 0 63 63 0 0 0 0 63 63 63 0 0 0 63 63 63 0 0 0 0 63 63 244 
def_blits_0x73b7                  EQU                          0x73b7
def_blits_0x73b7                  DB                           63 63 63 63 63 0 63 63 63 63 63 63 63 0 0 63 63 63 0 0 0 0 63 63 63 0 0 0 0 0 63 63 63 63 0 0 63 63 63 63 63 63 0 0 63 63 63 63 0 0 0 63 63 63 0 0 63 63 63 63 63 63 63 63 63 63 63 63 63 63 0 0 244 
def_blits_0x72b7                  EQU                          0x72b7
def_blits_0x72b7                  DB                           0 0 0 0 0 0 0 63 63 0 0 0 63 63 63 0 0 0 63 63 63 0 0 0 63 63 0 0 0 0 63 63 0 0 0 0 63 63 0 0 0 0 63 63 0 0 0 0 63 63 0 0 0 0 63 63 63 0 0 0 63 63 63 63 63 63 63 63 63 63 63 63 244 
def_blits_0x71b7                  EQU                          0x71b7
def_blits_0x71b7                  DB                           0 0 0 0 0 0 0 63 63 0 63 63 0 63 63 63 63 63 0 63 63 63 63 0 0 63 63 63 0 0 0 63 63 63 63 0 63 63 63 63 63 63 63 63 0 63 63 63 63 63 0 0 0 0 63 63 63 63 0 63 63 0 63 63 63 63 63 0 63 63 63 63 244 
def_blits_0x70b7                  EQU                          0x70b7
def_blits_0x70b7                  DB                           0 0 0 0 0 0 63 63 63 63 0 0 63 63 63 63 63 63 0 0 63 63 63 63 0 0 63 63 63 63 0 0 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 0 63 63 63 63 63 63 63 63 0 63 63 63 63 63 0 63 63 63 0 0 0 0 63 244 
def_blits_0x6fb7                  EQU                          0x6fb7
def_blits_0x6fb7                  DB                           0 0 0 0 0 0 63 63 63 63 0 63 63 63 63 63 63 63 63 63 63 63 63 63 63 0 0 63 63 63 0 0 0 0 63 63 0 0 0 0 63 63 0 0 0 63 63 63 63 0 0 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 0 63 63 244 
def_blits_0x6eb7                  EQU                          0x6eb7
def_blits_0x6eb7                  DB                           0 0 0 0 0 0 63 63 63 0 63 63 63 63 63 63 63 63 63 63 63 63 63 63 0 63 63 63 63 0 0 0 63 63 63 0 0 0 63 63 0 0 0 0 63 63 0 0 0 0 63 63 0 0 0 0 63 63 0 0 0 0 63 63 0 0 0 0 63 63 0 0 244 
def_blits_0x6db7                  EQU                          0x6db7
def_blits_0x6db7                  DB                           0 0 0 0 0 0 63 63 63 0 63 63 63 63 63 63 63 63 0 0 63 63 63 0 0 0 63 63 0 0 0 0 63 63 63 0 0 0 63 63 63 63 0 0 0 63 63 63 0 0 0 0 0 0 0 0 63 63 0 0 0 0 63 63 63 63 0 0 0 63 63 63 244 
def_blits_0x6cb7                  EQU                          0x6cb7
def_blits_0x6cb7                  DB                           0 0 0 0 0 0 63 63 0 63 0 63 63 63 63 63 0 63 0 0 63 63 0 63 0 0 63 63 63 63 0 0 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 0 63 63 63 63 63 63 63 63 0 63 63 63 63 63 0 63 63 63 63 0 0 0 63 244 
def_blits_0x6bb7                  EQU                          0x6bb7
def_blits_0x6bb7                  DB                           0 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 63 63 0 0 0 0 63 63 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 63 63 63 63 63 0 63 63 63 63 63 0 244 
def_blits_0x6ab7                  EQU                          0x6ab7
def_blits_0x6ab7                  DB                           63 63 0 0 0 0 63 63 0 0 0 0 0 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 63 63 63 63 0 63 63 63 63 63 63 63 63 0 0 63 63 63 0 0 0 63 63 63 63 0 0 63 63 63 63 63 63 63 63 0 63 63 63 244 
def_blits_0x69b7                  EQU                          0x69b7
def_blits_0x69b7                  DB                           0 63 63 0 0 0 0 63 63 0 0 0 63 63 63 0 63 63 63 63 63 63 63 63 63 63 63 63 63 0 63 63 63 63 0 0 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 0 0 63 63 63 63 63 0 63 63 0 63 63 63 63 0 0 0 63 63 244 
def_blits_0x68b7                  EQU                          0x68b7
def_blits_0x68b7                  DB                           0 0 0 0 0 0 0 0 63 63 63 0 63 0 63 63 63 63 63 63 63 0 63 63 63 63 63 0 63 63 0 63 63 63 0 63 63 63 63 63 0 63 63 63 63 0 0 63 0 0 0 0 0 63 0 0 63 63 0 63 63 63 63 63 0 63 63 63 63 0 0 63 244 
def_blits_0x67b7                  EQU                          0x67b7
def_blits_0x67b7                  DB                           0 0 0 0 0 0 63 63 63 63 0 0 63 63 63 63 0 0 63 63 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 244 

; Define Fonts

; Define Sprites

; Define Patterns

; Lookup Tables
_blitLut_0x73a9                   EQU                          0x73a9
_blitLut_0x73a9                   DW                           0x7dab 0x0000 0x7cab 0x0006 0x7bab 0x000c 0x0000
_blitLut_0x72a9                   EQU                          0x72a9
_blitLut_0x72a9                   DW                           0x7aab 0x0000 0x79ab 0x0006 0x78ab 0x000c 0x0000
_blitLut_0x71a9                   EQU                          0x71a9
_blitLut_0x71a9                   DW                           0x77a5 0x0000 0x76a5 0x0006 0x75a5 0x000c 0x0000
_blitLut_0x66c6                   EQU                          0x66c6
_blitLut_0x66c6                   DW                           0x74b7 0x0000 0x73b7 0x0006 0x72b7 0x000c 0x71b7 0x0012 0x70b7 0x0018 0x6fb7 0x001e 0x6eb7 0x0024 0x6db7 0x002a 0x6cb7 0x0030 0x6bb7 0x0036 0x6ab7 0x003c 0x69b7 0x0042 0x68b7 0x0048 0x67b7 0x004e 0x0000
_blitsLut_                        EQU                          0x7da3
_blitsLut_                        DW                           0x73a9 0x72a9 0x71a9 0x66c6 

; Lazy Constants

; Code
_entryPoint_                      LDI                          0x28
                                  STW                          romUser
                                  RomCheck                     
                                  Initialise                   
                                  InitEqOp                   
                                  InitLeOp                   
                                  InitGtOp                                                  ; INIT

                                  LDWI                         _initSystem
                                  CALL                         giga_vAC                     ; call initSystem

_reset                            LDWI                         _resetLevel
                                  CALL                         giga_vAC                     ; call resetLevel

_start                            LDWI                         _startLevel
                                  CALL                         giga_vAC                     ; call startLevel

_init                             LDWI                         _initVars
                                  CALL                         giga_vAC                     ; call initVars

_loop                             LD                           giga_buttonState
                                  STW                          _button                      ; button = get("BUTTON_STATE")

                                  LDW                          _dx
                                  MULW9                        
                                  STW                          mathX
                                  LDI                          10
                                  STW                          mathY
                                  LDWI                         divide16bit
                                  CALL                         giga_vAC
                                  STW                          _dx                          ; dx = (9*dx) / 10

                                  LDW                          _dy
                                  MULW9                        
                                  STW                          mathX
                                  LDI                          10
                                  STW                          mathY
                                  LDWI                         divide16bit
                                  CALL                         giga_vAC
                                  STW                          _dy                          ; dy = (9*dy) / 10

                                  LDW                          _button
                                  XORI                         254
                                  CALL                         convertEqOpAddr
                                  JumpFalse                    _if_0x0000 20
                                  LDW                          _sp
                                  STW                          _dx                          ; if button = 254 then dx = sp

_if_0x0000                        LDW                          _button
                                  XORI                         250
                                  CALL                         convertEqOpAddr
                                  JumpFalse                    _if_0x0001 21
                                  LDW                          _sp
                                  STW                          _dx
                                  STW                          _dy                          ; if button = 250 then dx = sp : dy = sp

_if_0x0001                        LDW                          _button
                                  XORI                         253
                                  CALL                         convertEqOpAddr
                                  JumpFalse                    _if_0x0002 22
                                  LDI                          0
                                  SUBW                         _sp
                                  STW                          _dx                          ; if button = 253 then dx = -sp

_if_0x0002                        LDW                          _button
                                  XORI                         249
                                  CALL                         convertEqOpAddr
                                  JumpFalse                    _if_0x0003 23
                                  LDI                          0
                                  SUBW                         _sp
                                  STW                          _dx
                                  LDW                          _sp
                                  STW                          _dy                          ; if button = 249 then dx = -sp : dy = sp

_if_0x0003                        LDW                          _button
                                  XORI                         247
                                  CALL                         convertEqOpAddr
                                  JumpFalse                    _if_0x0004 24
                                  LDI                          0
                                  SUBW                         _sp
                                  STW                          _dy                          ; if button = 247 then dy = -sp

_if_0x0004                        LDW                          _button
                                  XORI                         246
                                  CALL                         convertEqOpAddr
                                  JumpFalse                    _if_0x0005 25
                                  LDW                          _sp
                                  STW                          _dx
                                  LDI                          0
                                  SUBW                         _sp
                                  STW                          _dy                          ; if button = 246 then dx = sp : dy = -sp

_if_0x0005                        LDW                          _button
                                  XORI                         245
                                  CALL                         convertEqOpAddr
                                  STLW                         0xFE
                                  LDWI                         _page_0x0300
                                  CALL                         giga_vAC
_page_0x0300                      LDLW                         0xFE
                                  JumpFalse                    _if_0x0006 26
                                  LDI                          0
                                  SUBW                         _sp
                                  STW                          _dx
                                  LDI                          0
                                  SUBW                         _sp
                                  STW                          _dy                          ; if button = 245 then dx = -sp : dy = -sp

_if_0x0006                        LDW                          _button
                                  XORI                         251
                                  CALL                         convertEqOpAddr
                                  JumpFalse                    _if_0x0007 27
                                  LDW                          _sp
                                  STW                          _dy                          ; if button = 251 then dy = sp

_if_0x0007                        LDW                          _x
                                  ADDW                         _dx
                                  STW                          _x                           ; x = x + dx

                                  LDW                          _y
                                  ADDW                         _dy
                                  STW                          _y                           ; y = y + dy

                                  LD                           _x + 1
                                  SUBI                         140
                                  CALL                         convertGtOpAddr
                                  JumpFalse                    _if_0x0008 28
                                  LDI                          1
                                  ST                           _x + 1                       ; if x.hi > 140 then x.hi = 1

_if_0x0008                        LD                           _x + 1
                                  CALL                         convertLeOpAddr
                                  JumpFalse                    _if_0x0009 29
                                  LDI                          140
                                  ST                           _x + 1                       ; if x.hi <= 0 then x.hi = 140

_if_0x0009                        LD                           _y + 1
                                  SUBI                         105
                                  CALL                         convertGtOpAddr
                                  JumpFalse                    _if_0x000a 30
                                  LDI                          0
                                  SUBW                         _dx
                                  STW                          _dx
                                  LDI                          100
                                  ST                           _y + 1                       ; if y.hi > 105 then dx = -dx : y.hi = 100

_if_0x000a                        LD                           _y + 1
                                  SUBI                         4
                                  CALL                         convertLeOpAddr
                                  JumpFalse                    _if_0x000b 31
                                  LDI                          5
                                  ST                           _y + 1                       ; if y.hi <= 4 then y.hi = 5

_if_0x000b                        LDI                          0
                                  STW                          blitId
                                  LD                           _x + 1
                                  ST                           blitXY
                                  LD                           _y + 1
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, glider_up, x.hi, y.hi

                                  LDWI                         _loop
                                  CALL                         giga_vAC                     ; goto loop

_initSystem                       PUSH                                                      ; proc initSystem

                                  LDI                          2
                                  STW                          graphicsMode
                                  ScanlineMode                                              ; mode 2

                                  LDWI                         16128
                                  STW                          fgbgColour                   ; set FGBG_COLOUR, &h3F00

                                  Return                                                    ; endproc

_resetLevel                       PUSH                                                      ; proc resetLevel

                                  ClearVertBlinds                                           ; cls

                                  Return                                                    ; endproc

_startLevel                       PUSH                                                      ; proc startLevel

                                  ClearVertBlinds                                           ; cls

                                  Return                                                    ; endproc

_initVars                         PUSH                                                      ; proc initVars

                                  LDI                          71
                                  ST                           _x + 1                       ; x.hi = 71

                                  LDI                          54
                                  ST                           _y + 1                       ; y.hi = 54

                                  LDWI                         500
                                  STW                          _sp                          ; sp = 500

                                  LDI                          0
                                  STW                          _dx                          ; dx = 0

                                  LDI                          0
                                  STW                          _dy                          ; dy = 0

                                  LDI                          3
                                  STW                          blitId
                                  LDI                          38
                                  ST                           blitXY
                                  LDI                          24
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, logo, 38, 16

                                  LDI                          32
                                  ST                           cursorXY
                                  LDI                          90
                                  ST                           cursorXY + 1
                                  AtTextCursor                                              ; at 32,90

                                  STLW                         0xFE
                                  LDWI                         _page_0x0400
                                  CALL                         giga_vAC
_page_0x0400                      LDLW                         0xFE
                                  PrintString                  _str_0x74a5
                                  NewLine                                                   ; PRINT "PRESS A TO START"

                                  Return                                                    ; endproc

_handleInput                      PUSH                                                      ; proc handleInput

                                  LD                           giga_buttonState
                                  XORI                         0xff
                                  STW                          _handleInput_button          ; button = get("BUTTON_STATE") XOR 255

                                  LDW                          _handleInput_button
                                  XORI                         254
                                  CALL                         convertEqOpAddr
                                  JumpFalse                    _if_0x000c 32
                                  LDW                          _sp
                                  STW                          _dx                          ; if button = 254 then dx = sp

_if_0x000c                        LDW                          _handleInput_button
                                  XORI                         250
                                  CALL                         convertEqOpAddr
                                  JumpFalse                    _if_0x000d 33
                                  LDW                          _sp
                                  STW                          _dx
                                  STW                          _dy                          ; if button = 250 then dx = sp : dy = sp

_if_0x000d                        LDW                          _handleInput_button
                                  XORI                         253
                                  CALL                         convertEqOpAddr
                                  JumpFalse                    _if_0x000e 34
                                  LDI                          0
                                  SUBW                         _sp
                                  STW                          _dx                          ; if button = 253 then dx = -sp

_if_0x000e                        LDW                          _handleInput_button
                                  XORI                         249
                                  CALL                         convertEqOpAddr
                                  JumpFalse                    _if_0x000f 35
                                  LDI                          0
                                  SUBW                         _sp
                                  STW                          _dx
                                  LDW                          _sp
                                  STW                          _dy                          ; if button = 249 then dx = -sp : dy = sp

_if_0x000f                        LDW                          _handleInput_button
                                  XORI                         247
                                  CALL                         convertEqOpAddr
                                  JumpFalse                    _if_0x0010 36
                                  LDI                          0
                                  SUBW                         _sp
                                  STW                          _dy                          ; if button = 247 then dy = -sp

_if_0x0010                        LDW                          _handleInput_button
                                  XORI                         246
                                  CALL                         convertEqOpAddr
                                  JumpFalse                    _if_0x0011 37
                                  LDW                          _sp
                                  STW                          _dx
                                  LDI                          0
                                  SUBW                         _sp
                                  STW                          _dy                          ; if button = 246 then dx = sp : dy = -sp

_if_0x0011                        LDW                          _handleInput_button
                                  XORI                         245
                                  CALL                         convertEqOpAddr
                                  JumpFalse                    _if_0x0012 38
                                  LDI                          0
                                  SUBW                         _sp
                                  STW                          _dx
                                  LDI                          0
                                  SUBW                         _sp
                                  STW                          _dy                          ; if button = 245 then dx = -sp : dy = -sp

_if_0x0012                        LDW                          _handleInput_button
                                  XORI                         251
                                  CALL                         convertEqOpAddr
                                  JumpFalse                    _if_0x0013 39
                                  LDW                          _sp
                                  STW                          _dy                          ; if button = 251 then dy = sp

_if_0x0013                        LDW                          _x
                                  ADDW                         _dx
                                  STW                          _x                           ; x = x + dx

                                  LDW                          _y
                                  ADDW                         _dy
                                  STW                          _y                           ; y = y + dy

                                  LDW                          _handleInput_button
                                  STW                          _oldbutton                   ; oldbutton = button

                                  Return                                                    ; endproc

                                  HALT                                                      ; END



;*************************************************************************************************************
;*************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files *
;*************************************************************************************************************
;*************************************************************************************************************

romCheck                          EQU     0x62a0
convertEqOp                       EQU     0x7aa2
convertLeOp                       EQU     0x79a2
convertGtOp                       EQU     0x78a2
divide16bit                       EQU     0x64a8
scanlineMode                      EQU     0x7ba1
resetVideoFlags                   EQU     0x7ca0
initClearFuncs                    EQU     0x6fa6
clearVertBlinds                   EQU     0x62c9
clearCursorRow                    EQU     0x61cf
drawBlit_                         EQU     0x61a7
drawBlit                          EQU     0x6eaa
printInit                         EQU     0x70a1
printText                         EQU     0x60cc
printChar                         EQU     0x63ad
printClip                         EQU     0x60e5
newLineScroll                     EQU     0x65a4
atTextCursor                      EQU     0x66a2
convertEqOpAddr                   EQU     0x00b0
convertNeOpAddr                   EQU     0x00b2
convertLeOpAddr                   EQU     0x00b4
convertGeOpAddr                   EQU     0x00b6
convertLtOpAddr                   EQU     0x00b8
convertGtOpAddr                   EQU     0x00ba
convert8Arr2dAddr                 EQU     0x00bc
convert8Arr3dAddr                 EQU     0x00be
convert16Arr2dAddr                EQU     0x00c0
convert16Arr3dAddr                EQU     0x00c2
realTimeStubAddr                  EQU     0x00d4



realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romUser             EQU     register0                       
romType             EQU     register1                       
romExec_vLR         EQU     register0
romReadAddr         EQU     register0
romErrAddr          EQU     0x7E                            
vramErrAddr         EQU     0x0101

romErrAddr          DW      vramErrAddr



romCheck            LD      giga_romType
                    ANDI    0xFC
                    STW     romType
                    SUBW    romUser
                    BEQ     romC_return                     
                    LDW     romUser
                    SUBI    0x80                            
                    BNE     romC_check
                    LDW     romType
                    SUBW    romUser
                    BEQ     romC_return                     
                    BRA     romC_fail
                    
romC_check          LDW     romType                         
                    SUBW    romUser
                    BGT     romC_return                     
                    
romC_fail           LD      giga_rand0
                    POKE    romErrAddr                      
                    BRA     romC_fail
                    
romC_return         RET


                    
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET



mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


                    
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_pos0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_pos0       LDW     mathY                     
                    BGE     divide16_pos1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_pos1       LDI     0
                    STW     mathRem
                    LDI     1
    
divide16_loop       STW     mathMask
                    LDW     mathRem
                    LSLW
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_incr
                    INC     mathRem
                    
divide16_incr       LDW     mathX
                    LSLW
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_incx
                    STW     mathRem
                    INC     mathX
                    
divide16_incx       LDW     mathMask
                    LSLW
                    BNE     divide16_loop
%if TIME_SLICING
                    PUSH
                    CALL    realTimeStubAddr
                    POP
%endif
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET



graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register8
drawLine_dy1        EQU     register9
drawLine_dx2        EQU     register10
drawLine_dy2        EQU     register11
drawLine_sx         EQU     register12
drawLine_sy         EQU     register13
drawLine_h          EQU     register14
drawLine_num        EQU     register15
drawLine_count      EQU     register14
drawLine_tmp        EQU     register15
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10
drawLine_ddx        EQU     register11
drawLine_cnt        EQU     register12
drawLine_swp        EQU     register13
drawLine_xy         EQU     register7

readPixel_xy        EQU     register0
drawPixel_xy        EQU     register0

drawCircle_cycx     EQU     register0
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register16

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register8

drawPoly_addr       EQU     register7
drawPoly_mode       EQU     register14

    
scanlineMode        LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET



xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
clsLines            EQU     register14
varAddress          EQU     register13
clrAddress          EQU     register13
clrLines            EQU     register14
clrWidth            EQU     register15
ramAddr0            EQU     register14
ramAddr1            EQU     register15


resetVideoFlags     LDI     giga_CursorX                    
                    STW     cursorXY
                    LD      miscFlags
                    ANDI    MISC_ON_BOTTOM_ROW_MSK
                    ST      miscFlags                       
                    RET



initClearFuncs      PUSH
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
                    LDWI    SYS_SetMemory_v2_54             
                    STW     giga_sysFn
                    LD      fgbgColour
                    ST      giga_sysArg1                    
                    POP
                    RET


                    
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC
                    LDI     giga_vram >> 8
                    STW     top  
                    
clearVB_loopy       LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    
                    LD      top
                    ST      giga_sysArg3                    
                    SYS     54                              
    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                    
                    SYS     54                              
                    INC     top                             
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loopy
                    POP
                    RET




blitId              EQU     register0
blitXY              EQU     register1
blitAddrs           EQU     register2

    
drawBlit_           PUSH
                    LDWI    _blitsLut_
                    ADDW    blitId
                    ADDW    blitId
                    DEEK
                    STW     blitAddrs                     
                    
drawB_loop          LDW     blitAddrs
                    DEEK                                    
                    BEQ     drawB_exit
                    STW     giga_sysArg0
                    INC     blitAddrs
                    INC     blitAddrs
                    LDW     blitAddrs
                    DEEK                                    
                    ADDW    blitXY
                    SYS     64
                    INC     blitAddrs
                    INC     blitAddrs
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    BRA     drawB_loop
                    
drawB_exit          POP
                    RET


drawBlit            PUSH
                    LDWI    SYS_Sprite6_v3_64
                    STW     giga_sysFn
                    LDWI    drawBlit_
                    CALL    giga_vAC
                    POP
                    RET




textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textHex             EQU     register1
textSpc             EQU     register1
textLen             EQU     register2
textOfs             EQU     register3
textChr             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    
                    RET



                    
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    
printT_char         INC     textStr                         
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET



                    
printChar           LD      textChr
                    SUBI    130                             
                    BGT     printC_exit
                    ADDI    130
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     
                    STW     textChr                         
                    LDWI    giga_text32                     
                    BRA     printC_font
                    
printC_text82       STW     textChr                         
                    LDWI    giga_text82                     
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        
                    LUP     0x00                            
                    ST      giga_sysArg2
                    SYS     134                             
                    INC     textFont                        
                    INC     giga_sysArg4                    
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    
                    SYS     134                             
                    INC     giga_sysArg4                    
                    
                    PUSH
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LDWI    printClip
                    CALL    giga_vAC
                    POP
                    
printC_exit         RET


printClip           LD      cursorXY
                    ADDI    giga_xfont
                    ST      cursorXY
                    SUBI    giga_xres - giga_xfont          
                    BLE     printCl_exit
                    LD      miscFlags
                    ANDI    MISC_DISABLE_CLIP_BIT
                    BNE     printCl_exit                    
                    PUSH
                    LDWI    newLineScroll                   
                    CALL    giga_vAC
                    POP
                    
printCl_exit        RET



                    
clearCursorRow      PUSH
                    LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn                      
                    LD      fgbgColour
                    ST      giga_sysArg1                    
                    LDWI    giga_videoTable
                    PEEK
                    ST      giga_sysArg3                    
                    LDI     giga_yfont

clearCR_loopy       ST      clearLoop                    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    
                    SYS     54                              
                    INC     giga_sysArg3                    
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy
%if TIME_SLICING
                    CALL    realTimeStubAddr
%endif
                    LDWI    printInit
                    CALL    giga_vAC                        
                    POP
                    RET


                    
newLineScroll       LDI     giga_CursorX                    
                    ST      cursorXY
                    ST      giga_sysArg4
                    LD      miscFlags
                    ANDI    MISC_ENABLE_SCROLL_BIT
                    BNE     newLS_cont0                     
                    RET
                    
newLS_cont0         PUSH
                    LD      miscFlags
                    ANDI    MISC_ON_BOTTOM_ROW_BIT
                    BNE     newLS_cont1                     
                    LD      cursorXY + 1
                    ADDI    giga_yfont
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine

%if TIME_SLICING
newLS_scroll        CALL    realTimeStubAddr
                    LDW     scanLine
%else
newLS_scroll        LDW     scanLine
%endif
                    PEEK
                    ADDI    giga_yfont
                    SUBI    0x7F
                    BLE     newLS_adjust
                    ADDI    0x88
                    
newLS_adjust        ADDI    0x7F
                    POKE    scanLine
                    INC     scanLine                        
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            
                    BLT     newLS_scroll
                    
                    LD      miscFlags
                    ORI     MISC_ON_BOTTOM_ROW_BIT
                    ST      miscFlags                       
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        
                    POP
                    RET


atTextCursor        LD      cursorXY
                    SUBI    giga_xres - giga_xfont
                    BLE     atTC_checkY
                    LDI     0
                    ST      cursorXY
                    
atTC_checkY         LD      cursorXY + 1
                    SUBI    giga_yres - giga_yfont
                    BLT     atTC_resbot
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    LD      miscFlags
                    ORI     MISC_ON_BOTTOM_ROW_BIT
                    ST      miscFlags                       
                    RET
                    
atTC_resbot         LD      miscFlags
                    ANDI    MISC_ON_BOTTOM_ROW_MSK
                    ST      miscFlags                       
                    RET

